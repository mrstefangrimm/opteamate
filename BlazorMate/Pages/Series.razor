@*  Copyright (c) 2020 Stefan Grimm. All rights reserved.
    Licensed under the GPL. See LICENSE file in the project root for full license information.*@

@page "/series/{seriestoken}"
@inject HttpClient Http
@inject NavigationManager NavigationManager


<table>
    <thead>
        <tr>
            <td width="100%">
                <h1>Opteamate</h1>
            </td>
            <td align="right" valign="top">
                <button (click)="CopyLinkToClipboard()">In die URL in die Zwischenablage</button>
            </td>
        </tr>
        <tr>
            <td width="100%"><a href="/">zur Startseite</a></td>
            <td></td>
        </tr>
    </thead>
</table>



@if (events != null && !events.Any()) {
    <h2>Neue Serie</h2>
}

@if (events != null && events.Any()) {
    <table>
        <thead>
            <tr>
                <th>Wann</th>
                <th>Was</th>
                <th>Wo</th>
                <th>Details</th>
                <th>...</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ev in events) {
                <tr>
                    <td>@ev.data.start.ToLocalTime().ToShortDateString() @ev.data.start.ToLocalTime().ToShortTimeString()</td>
                    <td>@ev.data.title</td>
                    <td>@ev.data.location</td>
                    <td>
                        <a href="@GetLink(ev.data.eventToken)">Registrieren...</a>
                    </td>
                    <td>
                        <button color="standard" @onclick="(() => DeleteEvent(ev.id))">L&ouml;schen</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<br />

@if (optima != null) {
    <div>
        <label>Schema</label>
        <br />
        <select @bind="selectedOptimumId">
            @foreach (var item in optima) {
                <option value="@item.id">@item.data.name</option>
            }
        </select>

        <label>-</label>
        <label>Positions: @GetOptimumData(selectedOptimumId).positions</label>
        <label>-</label>
        <label>Optima: @GetOptimumData(selectedOptimumId).strategies</label>
    </div>

    <div>
        <label>Was</label>
        <input @bind="@newEvent.title" />
        <label>Wo</label>
        <input @bind="@newEvent.location" />
    </div>

    <div>
        <label>Wann</label>

        <input type="date" @bind="selectedDate" />

        <select @bind="selectedHour">
            @foreach (var item in new[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }) {
                <option value="@item">@string.Format("{0:00}", item)</option>
            }
        </select>
        <select @bind="selectedMinutes">
            @foreach (var item in new[] { 0, 15, 30, 45 }) {
                <option value="@item">@string.Format("{0:00}", item)</option>
            }
        </select>
    </div>

    <button class="btn btn-primary" @onclick="AddEvent">Hinzuf&uuml;gen</button>
}

@code {
  [Parameter]
  public string SeriesToken { get; set; }

  const string TocServiceEndpoint = "http://localhost:4700/api/toc";
  string optimaServiceEndpoint;
  string eventsServiceEndpoint;

  EventResponse[] events;
  EventData newEvent = new EventData();
  long selectedOptimumId;
  OptimumResponse[] optima;
  DateTime selectedDate = DateTime.Now;
  int selectedHour = 19;
  int selectedMinutes = 0;
  string seriesUrl;

  protected override async Task OnInitializedAsync() {
      // Get the URLs from the toc service
      var responseToc = await Http.GetFromJsonAsync<TocResponse>(TocServiceEndpoint);
      optimaServiceEndpoint = responseToc.hrefs["optima"];
      eventsServiceEndpoint = responseToc.hrefs["events"];

      seriesUrl = NavigationManager.BaseUri + "series/" + SeriesToken;
      await GetEventsBySeriesToken();

      var request = optimaServiceEndpoint;
      var response = await Http.GetFromJsonAsync<OptimaResponse>(request);
      optima = response.data;
      selectedOptimumId = optima[0].id;
  }

  OptimumData GetOptimumData(long id) {
      var or = optima.FirstOrDefault(o => o.id == id);
      return or?.data;
  }

  string GetLink(Guid eventToken) {
      return "/enroll/" + eventToken;
  }

  async Task GetEventsBySeriesToken() {
      var request = eventsServiceEndpoint + "byseries?token=" + SeriesToken;
      var response = await Http.GetFromJsonAsync<EventsResponse>(request);
      events = response.data;
  }

  async Task AddEvent() {
      newEvent.start = selectedDate;
      newEvent.start = new DateTime(selectedDate.Year, selectedDate.Month, selectedDate.Day, selectedHour, selectedMinutes, 0).ToUniversalTime();
      newEvent.optimumId = selectedOptimumId;
      newEvent.seriesToken = new Guid(SeriesToken);

      var request = eventsServiceEndpoint;
      var httpResponse = await Http.PostAsJsonAsync<EventData>(request, newEvent);
      var contentResponse = await httpResponse.Content.ReadFromJsonAsync<EventResponse>();

      await GetEventsBySeriesToken();
  }

  async Task DeleteEvent(long evtId) {
      var request = eventsServiceEndpoint + evtId;
      await Http.DeleteAsync(request);
      await GetEventsBySeriesToken();
  }

  private class OptimumData {
      public string name { get; set; }
      public string strategies { get; set; }
      public string positions { get; set; }
  }

  private class OptimumResponse {
      public long id { get; set; }
      public OptimumData data { get; set; }
  }

  private class OptimaResponse {
      public OptimumResponse[] data { get; set; }
  }

  private class EventData {
      public Guid eventToken { get; set; }
      public string title { get; set; }
      public string location { get; set; }
      public DateTime start { get; set; }
      public Guid seriesToken { get; set; }
      public long optimumId { get; set; }
  }

  private class EventResponse {
      public long id { get; set; }
      public EventData data { get; set; }
      public Dictionary<string, string> hrefs { get; set; }
  }

  private class EventsResponse {
      public EventResponse[] data { get; set; }
      public Dictionary<string, string> hrefs { get; set; }
  }

  private class TocResponse {
      public Dictionary<string, string> hrefs { get; set; }
  }

}
